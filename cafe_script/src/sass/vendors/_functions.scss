 
 /**
  * Font settings
  *
  */
  
  $base-font-size : map-get($fonts_settings, font-size);
  $base-line-height : map-get($fonts_settings, line-height);
  $base-font-family : map-get($fonts_settings, font-family);







 /**
  * Clearfix
  *
  */

 @mixin clearfix() {
     &:before,
     &:after {
         content: "";
         display: table;
     }
     &:after {
         clear: both;
     }
 }






 /**
  * Respond-to
  *
  * @params $breakpoint
  * @return CSS media queries with @content
  */

 @mixin respond-to($breakpoint) {
     @if type-of($breakpoint) == 'string' {
         @if map-has-key($tweakpoints, $breakpoint) {
             $breakpoint : inspect(map-get($tweakpoints, $breakpoint));
             
             @media only screen and (min-width: $breakpoint) {
                 @content;
             }
         }  
         @else if map-has-key($breakpoints, $breakpoint) {
             $breakpoint : inspect(map-get($breakpoints, $breakpoint));
             
             @media only screen and (min-width: $breakpoint) {
                 @content;
             }
         }  
         @else {
             @error 'No value found for `#{$breakpoint}`. ';
         }    
     }
     @else{
         @media only screen and (min-width: $breakpoint) {
             @content;
         }
     }
 }

 $tweakpoints:()!global;
 





 /**
  * Font-settings
  *
  */

 @mixin font-settings() {    
     html {
         font-size: 100%;
         font-family: $base-font-family;
     }

     body{
         font-size: $base-font-size;
         line-height: $base-line-height;
     }
 }






 /**
  * Strip units
  *
  * @return var without units
  */

 @function strip-units($number) {
     @return $number / ($number * 0 + 1);
 }






 /**
  * Square
  *
  */

 @mixin square($a) {
     width:$a;    height: $a;
 }


 /* ------------------------------------- */